/server/login

Session found.
{ id: 'ba9eb8d0e540ce6662834f08e0962135d8be4170a3c44229ababf0350716f2ed9f3995cae0f01638637827aaadff2c59' }

POST, not multipart. Assuming querystring. Actual: application/x-www-form-urlencoded; charset=UTF-8
Waiting for body before sending through tunnel...
un=Ben&pwd=65LLMPQrevres
Sending through tunnel /
Error: Cannot find module '/home/bensigal/server/www/tunnel.node.js'
    at Function.Module._resolveFilename (module.js:338:15)
    at Function.Module._load (module.js:289:25)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at sendThroughTunnel (/home/bensigal/server/server.js:262:20)
    at IncomingMessage.<anonymous> (/home/bensigal/server/server.js:106:4)
    at emitNone (events.js:67:13)
    at IncomingMessage.emit (events.js:166:7)
    at endReadableNT (_stream_readable.js:905:12)
    at doNTCallback2 (node.js:441:9)
Tunnel not found at /home/bensigal/server/www/tunnel.node.js
At default tunnel
Sending through tunnel /server/
function (req,res,server){
	if(/login\/?/.test(req.path)){
		if(req.method=="POST"){
			req.log("Login attempt");
			var unIndex=users.indexOf(req.post.un);
			if(unIndex>-1&&unIndex==passwords.indexOf(new Buffer(req.post.pwd).toString("base64"))){
				req.session.on=true;
				req.session.un=req.post.un;
				req.session.pwd=req.post.pwd;
			}
		}
		return req.session.on?"true":"false";
	}else if(/throwError.*/.test(req.path)){
		server.showErrorPage(Number(req.path.substring(req.path.lastIndexOf("/")+1)),req,res);
	//Below are functions that require login. Catch unauthorized users here.	
	}else if(!req.session.on){
		server.getFile(root+"login.html",req,res,{
			statusCode: 401,
			pathNotFromWww:true
		});
	}else if(/logout\/?/.test(req.path)){
		req.log("Logging out.");
		req.session.on=false;
		return "false";
	}else if(/siteMap\/?/.test(req.path)){ 
		if(!req.post || !req.post.dir)
			server.sendString("No sitemap location sent.",req,res);
		//Not allowed to go up a directory. The server doesn't like that.
		if(req.post.dir.includes(".."))
			server.sendString("Invalid request: String .. in filepath dangerous.",req,res);
		//Looking into non-home-directory folders is dangerous. Best to shut out non-admins.
		if(!req.post.dir.startsWith("/home/bensigal")&&req.session.un!="Ben")
			server.sendString("Non-admins are not allowed to navigate out of home directory.",req,res);
		req.log("Generating sitemap for "+req.post.dir);
		fs.readdir(req.post.dir,function(err,items){
			if(err){
				if(err.code=="ENOENT")
					server.sendString("Folder not found.",req,res);
				else{
					server.sendString("Unknown error.",req,res);
					req.log(err.stack);
				}
				return;
			}
			var dirs = [];
			var files= [];
			var responsesLeft = items.length;
			items.forEach(function(file){
				//This is some weird code, but necessary for a good async paradigm.
				//Each execution of the callback to stat needs the file name,
				//Because stat objects don't contain the file name. So, we have a 
				//closure to retain the fariable file, which is a string from items.
				//Because they will not necessarily finish in order, each has the capacity
				//to send off the completed list. Closures for the win.
				fs.stat(req.post.dir+file,function(file){
					return function(err, stats){
						responsesLeft--;
						if(err){
							req.err(err.stack);
							files.push(file+"<br>INACCESSIBLE");
						}else if(stats.isDirectory()){
							dirs.push(file);
						}else{
							files.push(file);
						}
						if(responsesLeft===0){
							req.log("COMPLETE "+dirs+files);
							server.sendString(dirs.join(";")+"\n"+files.join(";"),req,res);
						}
					}
				}(file));
			});
		});
	//BELOW ARE ADMIN-ONLY FUNCTIONS. Catch normal users here.
	}else if(req.session.un!="Ben"){
		server.showErrorPage(403,req,res);
	}else if(/exit\/?/.test(req.path)){
		server.process.exit();
		return;
	}else if(/ssh\/?/.test(req.path)){ 
		exec(["C:\\Program Files (x86)\\freeSSHd\\FreeSSHDService.exe"],function(err,out,code){
			if(err instanceof Error){
				req.err(err.stack);
			}
			process.stdout.write(out);
		});
		return "Attempted successfully.";
	}else if(/getFileContents\/?/.test(req.path)){
		req.log("Reading file contents for "+req.post.edit);
		server.getFile(req.post.edit,req,res,{
			pathNotFromWww:true,
			notFoundCallback:function(){
				server.sendString("Error: File not found.",req,res);
			},
			encoding:"binary"
		});
	}else if(/save\/?/.test(req.path)){
		req.log("Saving to file "+req.post.file);
		var is = fs.createReadStream(req.files.contents[0].path);
		var os = fs.createWriteStream(String(req.post.file));
		is.pipe(os);
		is.on('end',function(err){
			if(err)throw err;
			fs.unlink(req.files.contents[0].path,function(err){
				if(err)throw err;
				server.sendString("Success!",req,res);
			});
		});
	}else if (/delete\/?/.test(req.path)){
	    req.log("Deleting "+req.post.file);
	    return "";
	}else if (/javac\/?/.test(req.path)){
	    exec("javac "+req.post.args+" "+req.post.file, function(error, stdout, stderr){
            if(error){
                server.sendString(error.stack,req,res);
            }else{
                server.sendString(stdout.toString()+stderr.toString(),req,res);
            }
	    });
	}
	else{
		server.showErrorPage(404,req,res);
	}
}
Login attempt
Detected output from tunnel; sending as plain text.
Sending string data.
