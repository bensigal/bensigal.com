/server/getFileContents

Session found.
{ id: 'ce407d87f344b0957cbdf53dcd09acaadb68f33142ab88d90704d45b9559f6dd1158e94ff4c6fd775c36227d18de7124',
  on: true,
  un: 'Ben',
  pwd: '65LLMPQrevres' }

POST, not multipart. Assuming querystring. Actual: application/x-www-form-urlencoded; charset=UTF-8
Waiting for body before sending through tunnel...
edit=%2Fhome%2Fbensigal%2Fserver%2Fwww%2Fserver%2Ftunnel.node.js
Sending through tunnel /
Error: Cannot find module '/home/bensigal/server/www/tunnel.node.js'
    at Function.Module._resolveFilename (module.js:338:15)
    at Function.Module._load (module.js:289:25)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at sendThroughTunnel (/home/bensigal/server/server.js:262:20)
    at IncomingMessage.<anonymous> (/home/bensigal/server/server.js:106:4)
    at emitNone (events.js:67:13)
    at IncomingMessage.emit (events.js:166:7)
    at endReadableNT (_stream_readable.js:905:12)
    at doNTCallback2 (node.js:441:9)
Tunnel not found at /home/bensigal/server/www/tunnel.node.js
At default tunnel
Sending through tunnel /server/
function (req,res,server){
	if(/login\/?/.test(req.path)){
		if(req.method=="POST"){
			req.log("Login attempt");
			var unIndex=users.indexOf(req.post.un);
			if(unIndex>-1&&unIndex==passwords.indexOf(new Buffer(req.post.pwd).toString("base64"))){
				req.session.on=true;
				req.session.un=req.post.un;
				req.session.pwd=req.post.pwd;
			}
		}
		return req.session.on?"true":"false";
	}else if(/throwError.*/.test(req.path)){
		server.showErrorPage(Number(req.path.substring(req.path.lastIndexOf("/")+1)),req,res);
	//Below are functions that require login. Catch unauthorized users here.	
	}else if(!req.session.on){
		server.getFile(root+"login.html",req,res,{
			statusCode: 401,
			pathNotFromWww:true
		});
	}else if(/logout\/?/.test(req.path)){
		req.log("Logging out.");
		req.session.on=false;
		return "false";
	}else if(/siteMap\/?/.test(req.path)){ 
		if(!req.post || !req.post.dir)
			server.sendString("No sitemap location sent.",req,res);
		//Not allowed to go up a directory. The server doesn't like that.
		if(req.post.dir.includes(".."))
			server.sendString("Invalid request: String .. in filepath dangerous.",req,res);
		//Looking into non-home-directory folders is dangerous. Best to shut out non-admins.
		if(!req.post.dir.startsWith("/home/bensigal")&&req.session.un!="Ben")
			server.sendString("Non-admins are not allowed to navigate out of home directory.",req,res);
		req.log("Generating sitemap for "+req.post.dir);
		fs.readdir(req.post.dir,function(err,items){
			if(err){
				if(err.code=="ENOENT")
					server.sendString("Folder not found.",req,res);
				else{
					server.sendString("Unknown error.",req,res);
					req.log(err.stack);
				}
				return;
			}
			var dirs = [];
			var files= [];
			var responsesLeft = items.length;
			items.forEach(function(file){
				//This is some weird code, but necessary for a good async paradigm.
				//Each execution of the callback to stat needs the file name,
				//Because stat objects don't contain the file name. So, we have a 
				//closure to retain the fariable file, which is a string from items.
				//Because they will not necessarily finish in order, each has the capacity
				//to send off the completed list. Closures for the win.
				fs.stat(req.post.dir+file,function(file){
					return function(err, stats){
						responsesLeft--;
						if(err){
							req.err(err.stack);
							files.push(file+"<br>INACCESSIBLE");
						}else if(stats.isDirectory()){
							dirs.push(file);
						}else{
							files.push(file);
						}
						if(responsesLeft===0){
							req.log("COMPLETE "+dirs+files);
							server.sendString(dirs.join(";")+"\n"+files.join(";"),req,res);
						}
					}
				}(file));
			});
		});
	//BELOW ARE ADMIN-ONLY FUNCTIONS. Catch normal users here.
	}else if(req.session.un!="Ben"){
		server.showErrorPage(403,req,res);
	}else if(/exit\/?/.test(req.path)){
		server.process.exit();
		return;
	}else if(/ssh\/?/.test(req.path)){ 
		exec(["C:\\Program Files (x86)\\freeSSHd\\FreeSSHDService.exe"],function(err,out,code){
			if(err instanceof Error){
				req.err(err.stack);
			}
			process.stdout.write(out);
		});
		return "Attempted successfully.";
	}else if(/getFileContents\/?/.test(req.path)){
		req.log("Reading file contents for "+req.post.edit);
		server.getFile(req.post.edit,req,res,{
			pathNotFromWww:true,
			notFoundCallback:function(){
				server.sendString("Error: File not found.",req,res);
			},
			encoding:"binary"
		});
	}else if(/save\/?/.test(req.path)){
		req.log("Saving to file "+req.post.file);
		var is = fs.createReadStream(req.files.contents[0].path);
		var os = fs.createWriteStream(String(req.post.file));
		is.pipe(os);
		is.on('end',function(err){
			if(err)throw err;
			fs.unlink(req.files.contents[0].path,function(err){
				if(err)throw err;
				server.sendString("Success!",req,res);
			});
		});
	}else if (/delete\/?/.test(req.path)){
	    req.log("Deleting "+req.post.file);
	    return "";
	}else if (/javac\/?/.test(req.path)){
	    exec("javac "+req.post.args+" "+req.post.file, function(error, stdout, stderr){
            if(error){
                server.sendString(error.stack,req,res);
            }else{
                server.sendString(stdout.toString()+stderr.toString(),req,res);
            }
	    });
	}
	else{
		server.showErrorPage(404,req,res);
	}
}
Reading file contents for /home/bensigal/server/www/server/tunnel.node.js
Sending /home/bensigal/server/www/server/tunnel.node.js with options { pathNotFromWww: true,
  notFoundCallback: [Function],
  encoding: 'binary' }
'var fs  \t= require("fs");\nvar exec    = require("child_process").exec;\nvar passwords = require("../../passwords.js");\n//NOTE: THIS FILE CONTAINS ALL OF THE INTENTIONALLY DANGEROUS FUNCTIONS OF THE SERVER. \n//BE VEWWY CAREFUL.\n//Yup. All the good stuff, in one file. Even the editor sends requests for secret\n//information here.\n\nmodule.exports=function(req,res,server){\n\tif(/login\\/?/.test(req.path)){\n\t\tif(req.method=="POST"){\n\t\t\treq.log("Login attempt");\n\t\t\tvar unIndex=users.indexOf(req.post.un);\n\t\t\tif(unIndex>-1&&unIndex==passwords.indexOf(new Buffer(req.post.pwd).toString("base64"))){\n\t\t\t\treq.session.on=true;\n\t\t\t\treq.session.un=req.post.un;\n\t\t\t\treq.session.pwd=req.post.pwd;\n\t\t\t}\n\t\t}\n\t\treturn req.session.on?"true":"false";\n\t}else if(/throwError.*/.test(req.path)){\n\t\tserver.showErrorPage(Number(req.path.substring(req.path.lastIndexOf("/")+1)),req,res);\n\t//Below are functions that require login. Catch unauthorized users here.\t\n\t}else if(!req.session.on){\n\t\tserver.getFile(root+"login.html",req,res,{\n\t\t\tstatusCode: 401,\n\t\t\tpathNotFromWww:true\n\t\t});\n\t}else if(/logout\\/?/.test(req.path)){\n\t\treq.log("Logging out.");\n\t\treq.session.on=false;\n\t\treturn "false";\n\t}else if(/siteMap\\/?/.test(req.path)){ \n\t\tif(!req.post || !req.post.dir)\n\t\t\tserver.sendString("No sitemap location sent.",req,res);\n\t\t//Not allowed to go up a directory. The server doesn\'t like that.\n\t\tif(req.post.dir.includes(".."))\n\t\t\tserver.sendString("Invalid request: String .. in filepath dangerous.",req,res);\n\t\t//Looking into non-home-directory folders is dangerous. Best to shut out non-admins.\n\t\tif(!req.post.dir.startsWith("/home/bensigal")&&req.session.un!="Ben")\n\t\t\tserver.sendString("Non-admins are not allowed to navigate out of home directory.",req,res);\n\t\treq.log("Generating sitemap for "+req.post.dir);\n\t\tfs.readdir(req.post.dir,function(err,items){\n\t\t\tif(err){\n\t\t\t\tif(err.code=="ENOENT")\n\t\t\t\t\tserver.sendString("Folder not found.",req,res);\n\t\t\t\telse{\n\t\t\t\t\tserver.sendString("Unknown error.",req,res);\n\t\t\t\t\treq.log(err.stack);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar dirs = [];\n\t\t\tvar files= [];\n\t\t\tvar responsesLeft = items.length;\n\t\t\titems.forEach(function(file){\n\t\t\t\t//This is some weird code, but necessary for a good async paradigm.\n\t\t\t\t//Each execution of the callback to stat needs the file name,\n\t\t\t\t//Because stat objects don\'t contain the file name. So, we have a \n\t\t\t\t//closure to retain the fariable file, which is a string from items.\n\t\t\t\t//Because they will not necessarily finish in order, each has the capacity\n\t\t\t\t//to send off the completed list. Closures for the win.\n\t\t\t\tfs.stat(req.post.dir+file,function(file){\n\t\t\t\t\treturn function(err, stats){\n\t\t\t\t\t\tresponsesLeft--;\n\t\t\t\t\t\tif(err){\n\t\t\t\t\t\t\treq.err(err.stack);\n\t\t\t\t\t\t\tfiles.push(file+"<br>INACCESSIBLE");\n\t\t\t\t\t\t}else if(stats.isDirectory()){\n\t\t\t\t\t\t\tdirs.push(file);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tfiles.push(file);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(responsesLeft===0){\n\t\t\t\t\t\t\treq.log("COMPLETE "+dirs+files);\n\t\t\t\t\t\t\tserver.sendString(dirs.join(";")+"\\n"+files.join(";"),req,res);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}(file));\n\t\t\t});\n\t\t});\n\t//BELOW ARE ADMIN-ONLY FUNCTIONS. Catch normal users here.\n\t}else if(req.session.un!="Ben"){\n\t\tserver.showErrorPage(403,req,res);\n\t}else if(/exit\\/?/.test(req.path)){\n\t\tserver.process.exit();\n\t\treturn;\n\t}else if(/ssh\\/?/.test(req.path)){ \n\t\texec(["C:\\\\Program Files (x86)\\\\freeSSHd\\\\FreeSSHDService.exe"],function(err,out,code){\n\t\t\tif(err instanceof Error){\n\t\t\t\treq.err(err.stack);\n\t\t\t}\n\t\t\tprocess.stdout.write(out);\n\t\t});\n\t\treturn "Attempted successfully.";\n\t}else if(/getFileContents\\/?/.test(req.path)){\n\t\treq.log("Reading file contents for "+req.post.edit);\n\t\tserver.getFile(req.post.edit,req,res,{\n\t\t\tpathNotFromWww:true,\n\t\t\tnotFoundCallback:function(){\n\t\t\t\tserver.sendString("Error: File not found.",req,res);\n\t\t\t},\n\t\t\tencoding:"binary"\n\t\t});\n\t}else if(/save\\/?/.test(req.path)){\n\t\treq.log("Saving to file "+req.post.file);\n\t\tvar is = fs.createReadStream(req.files.contents[0].path);\n\t\tvar os = fs.createWriteStream(String(req.post.file));\n\t\tis.pipe(os);\n\t\tis.on(\'end\',function(err){\n\t\t\tif(err)throw err;\n\t\t\tfs.unlink(req.files.contents[0].path,function(err){\n\t\t\t\tif(err)throw err;\n\t\t\t\tserver.sendString("Success!",req,res);\n\t\t\t});\n\t\t});\n\t}else if (/delete\\/?/.test(req.path)){\n\t    req.log("Deleting "+req.post.file);\n\t    return "";\n\t}else if (/javac\\/?/.test(req.path)){\n\t    exec("javac "+req.post.args+" "+req.post.file, function(error, stdout, stderr){\n            if(error){\n                server.sendString(error.stack,req,res);\n            }else{\n                server.sendString(stdout.toString()+stderr.toString(),req,res);\n            }\n\t    });\n\t}\n\telse{\n\t\tserver.showErrorPage(404,req,res);\n\t}\n}\n\nvar users=[\n\t"Ben"\n];\n\nmodule.exports.initialized=0;\nmodule.exports.init=function(passedRoot,passedServer){\n\troot=passedRoot;\n\tserver=passedServer;\n\tpasswords=require(root+"passwords.js")\n\tconsole.log(root+"passwords.js")\n}'
